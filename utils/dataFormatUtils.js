/**
 * Utility functions for formatting and displaying data in the landslide monitoring app
 */

// Translate keys from English to Thai
export const translateKey = (key) => {
  const translations = {
    lat: '‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î',
    lon: '‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î',
    alt: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á',
    altitude: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á GPS',
    elevation: '‡∏°‡∏∏‡∏°‡πÄ‡∏á‡∏¢',
    distance: '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á',
    azimuth: '‡∏°‡∏∏‡∏°‡πÅ‡∏≠‡∏ã‡∏¥‡∏°‡∏±‡∏ó',
    slopeDistance: '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏•‡∏≤‡∏î‡πÄ‡∏≠‡∏µ‡∏¢‡∏á',
    mode: '‡πÇ‡∏´‡∏°‡∏î'
  };
  return translations[key] || key;
};

// Format value based on data type
export const formatValue = (key, value) => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ undefined, null ‡∏´‡∏£‡∏∑‡∏≠ NaN
  if (value === undefined || value === null || isNaN(value)) {
    if (key === 'lat' || key === 'lon') return '--¬∞';
    if (key === 'alt' || key === 'slopeDistance') return '-- m';
    if (key === 'altitude' || key === 'azimuth' || key === 'elevation') return '--¬∞';
    if (key === 'mode') return '‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
    return '--';
  }

  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  const numValue = Number(value);
  
  if (key === 'lat' || key === 'lon') return `${numValue.toFixed(3)}¬∞`;
  if (key === 'alt' || key === 'slopeDistance' || key === 'distance') return `${numValue.toFixed(2)} m`;
  if (key === 'altitude' || key === 'azimuth' || key === 'elevation') return `${numValue.toFixed(2)}¬∞`;
  if (key === 'mode') {
    if (numValue === 1) return "‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥";
    if (numValue === 2) return "‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô";
    return `‡πÇ‡∏´‡∏°‡∏î: ${numValue}`;
  }
  return numValue.toString();
};

// Get icon for each data type
export const getIconForKey = (key) => {
  switch(key) {
    case 'alt': return 'üèîÔ∏è';
    case 'altitude': return 'üìç';
    case 'azimuth': return 'üß≠';
    case 'elevation': return 'üìê';
    case 'distance': return 'üìè';
    case 'slopeDistance': return 'üìê';
    case 'lat': return 'üåê';
    case 'lon': return 'üåê';
    case 'mode': return 'üîî';
    default: return 'üìä';
  }
};

export const formatSensorValue = (key, value) => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ undefined, null ‡∏´‡∏£‡∏∑‡∏≠ NaN
  if (value === undefined || value === null || isNaN(value)) {
    if (key === 'alt' || key === 'slopeDistance' || key === 'distance') return '-- m';
    if (key === 'altitude' || key === 'azimuth' || key === 'elevation') return '--¬∞';
    return '--';
  }

  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  const numValue = Number(value);
  
  if (key === 'alt' || key === 'slopeDistance' || key === 'distance') return `${numValue.toFixed(2)} m`;
  if (key === 'altitude' || key === 'azimuth' || key === 'elevation') return `${numValue.toFixed(2)}¬∞`;
  return numValue.toString();
};